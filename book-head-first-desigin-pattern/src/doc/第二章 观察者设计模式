# 1.观察者设计模式
1.  定义：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖都会受到通知。
2.  感性认识：是两簇相关的类之间的关系；从数据流的角度来看，是一个源头多个分支的模型
3.  观察者模式还是比较简单的。

# 2.实现和心得
1.  在代码中实现了一把，差点写成了'发布订阅模式'。
2.  具体的实现细节就不写了，简单比较一下与发布订阅模式的区别。

## 2.1 [观察者 VS 发布订阅](https://www.cnblogs.com/lovesong/p/5272752.html)
1.  从名字上看，观察者更侧重数据流的下端，而发布订阅模式则兼顾了数据的生产者和消费者(好吧，还是把'数据的生产者和消费者'请出来了)；
2.  在解耦方面：观察者观察的subject是编译时就设定好的了；而发布订阅模式之间是更灵活的订阅转发模型，比如rabbitMQ的四种exchange
3.  组件：观察者被调用是有主题直接来的，也就是生产者来直接调用消费者；
    而订阅发布模式，则多了一个调度中心，发布者、订阅者都各自与调度中心交互，发布者和订阅者本身是不耦合的。

4.  总结：观察者有点轻量级的意思，实现简单，但是耦合度还是有点高。发布订阅模式则比较重而功能强大。



# 3.最后的总结
1.  是描述多个类簇之间的关系吗？
2.  设计原则：松耦合(为交互对象之间的松耦合设计而努力——其中面向抽象编程就是一把的利器)