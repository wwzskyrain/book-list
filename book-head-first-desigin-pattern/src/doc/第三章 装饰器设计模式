#1. 装饰器设计模式
1.  要求：运行时扩展、给继承找一个强大的伙伴
2.  设计原则：开闭原则
3.  感性认识：
    1.  起初：我们很喜欢它，以为是出'继承'之外的一个复用的利器(复用，我们的组合模式不也是出于复用而且很好的达标了吗？)
    2.  随处可见：其实这个模式我们经常用的，比如我们用http包装一下rpc服务；我们业务方包装一下中台的某个接口调用。
        这样说又有点像桥接的模式、适配器模式。
    3.  从功能增强上说，很想代理模式

# 2.描述一下
1.  现有四种咖啡A-C、B-C、C-C、D-C
2.  他们都可以加不同的配料：奶茶、巧克力、牛奶、抹茶
3.  现在要要设计一个类结构，不同的咖啡，加上不同的配料，其收费是不同的。
4.  用继承的方式，则相当于要组合出好多个类来，俗称类爆炸
5.  于是改为装饰器模式：把配料类作为'咖啡的装饰'，并且每个装饰器类的父类型就是被转装饰者呢
    装饰器类持有一个父类型的对象，作为被装饰对象——TM，这跟上午我们看过的jdk中的动态代理的实现太像了。
6.  从保持类型一致上，装饰器模式和代理模式一样，和适配器模式刚好不一样；
    适配器不会增强功能，而代理会、装饰器也会。
    代理类是装饰器的一种实现吧。






# 2.相似模式大家谈
1.  桥接模式
2.  适配器模式
3.  代理